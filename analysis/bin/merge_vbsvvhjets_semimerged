#!/usr/bin/env python3
# -*- coding: utf-8 -*
import os
import argparse
from utils.merge import merge

BKG_SAMPLE_MAP = {
    "rare_top": {
        "2016preVFP":  ["ST*", "TTW*", "ttH*"],
        "2016postVFP": ["ST*", "TTW*", "ttH*"],
        "2017":        ["ST*", "TTW*", "ttH*"],
        "2018":        ["ST*", "TTW*", "ttH*"],
    },
    "ttbar": {
        "2016preVFP":  ["TTToHadronic*", "TTToSemiLep*"],
        "2016postVFP": ["TTToHadronic*", "TTToSemiLep*"],
        "2017":        ["TTToHadronic*", "TTToSemiLep*"],
        "2018":        ["TTToHadronic*", "TTToSemiLep*"],
    },
    "QCD": {
        "2016preVFP":  ["QCD_HT*"],
        "2016postVFP": ["QCD_HT*"],
        "2017":        ["QCD_HT*"],
        "2018":        ["QCD_HT*"],
    },
    "wjets": {
        "2016preVFP":  ["WJets*"],
        "2016postVFP": ["WJets*"],
        "2017":        ["WJets*"],
        "2018":        ["WJets*"],
    },
    "zjets": {
        "2016preVFP":  ["ZJets*"],
        "2016postVFP": ["ZJets*"],
        "2017":        ["ZJets*"],
        "2018":        ["ZJets*"],
    },
    "rare_EWK": {
        "2016preVFP":  ["WWW*","WWZ*", "WZZ*", "ZZZ*", "EWK*", "WZJJ_EWK*"],
        "2016postVFP": ["WWW*","WWZ*", "WZZ*", "ZZZ*", "EWK*", "WZJJ_EWK*"],
        "2017":        ["WWW*","WWZ*", "WZZ*", "ZZZ*", "EWK*", "WZJJ_EWK*"],
        "2018":        ["WWW*","WWZ*", "WZZ*", "ZZZ*", "EWK*", "WZJJ_EWK*"],
    },
    "VV_VH": {
        "2016preVFP":  ["WWTo*", "ZZTo*", "WZTo*", "VHToNonbb_M125", "*HToBB*" ],
        "2016postVFP": ["WWTo*", "ZZTo*", "WZTo*", "VHToNonbb_M125", "*HToBB*" ],
        "2017":        ["WWTo*", "ZZTo*", "WZTo*", "VHToNonbb_M125", "*HToBB*" ],
        "2018":        ["WWTo*", "ZZTo*", "WZTo*", "VHToNonbb_M125", "*HToBB*" ],
    },
    # "TTH": {
    #     "2016preVFP":  ["ttH*"],
    #     "2016postVFP": ["ttH*"],
    #     "2017":        ["ttH*"],
    #     "2018":        ["ttH*"],
    # },
    # "Bosons": {
    #     "2016preVFP":  ["WW*", "WZ*", "ZZ*", "DY*", "EWKW*WToQQ*", "EWKZ*ZToNuNu*", "EWKZ*ZToLL*", "EWKZ*ZToQQ*", "*", "*", "*HToBB*", ""],
    #     "2016postVFP": ["WW*", "WZ*", "ZZ*", "DY*", "EWKW*WToQQ*", "EWKZ*ZToNuNu*", "EWKZ*ZToLL*", "EWKZ*ZToQQ*", "*", "*", "*HToBB*", ""],
    #     "2017":        ["WW*", "WZ*", "ZZ*", "DY*", "EWKW*WToQQ*", "EWKZ*ZToNuNu*", "EWKZ*ZToLL*", "EWKZ*ZToQQ*", "*", "*", "*HToBB*", ""],
    #     "2018":        ["WW*", "WZ*", "ZZ*", "DY*", "EWKW*WToQQ*", "EWKZ*ZToNuNu*", "EWKZ*ZToLL*", "EWKZ*ZToQQ*", "*", "*", "*HToBB*", ""],
    # },
}

SIG_SAMPLE_MAP = {
    "SSVBSWWH": {
        "2016preVFP":  ["VBSWWH_SS_VBSCuts*"],
        "2016postVFP": ["VBSWWH_SS_VBSCuts*"],
        "2017":        ["VBSWWH_SS_VBSCuts*"],
        "2018":        ["VBSWWH_SS_VBSCuts*"]
    },
    "OSVBSWWH": {
        "2016preVFP":  ["VBSWWH_OS_VBSCuts*"],
        "2016postVFP": ["VBSWWH_OS_VBSCuts*"],
        "2017":        ["VBSWWH_OS_VBSCuts*"],
        "2018":        ["VBSWWH_OS_VBSCuts*"]
    },
    "VBSWZH": {
        "2016preVFP":  ["VBSWZH_VBSCuts*"],
        "2016postVFP": ["VBSWZH_VBSCuts*"],
        "2017":        ["VBSWZH_VBSCuts*"],
        "2018":        ["VBSWZH_VBSCuts*"]
    },
    "VBSZZH": {
        "2016preVFP":  ["VBSZZH_VBSCuts*"],
        "2016postVFP": ["VBSZZH_VBSCuts*"],
        "2017":        ["VBSZZH_VBSCuts*"],
        "2018":        ["VBSZZH_VBSCuts*"]
    },
}

OTHER_SAMPLE_MAP = {
    "data": {
        "2016preVFP":  ["*Run201*"],
        "2016postVFP": ["*Run201*"],
        "2017":        ["*Run201*"],
        "2018":        ["*Run201*"]
    },
    "VBSVVH": {
        "2016preVFP":  ["VBSWWH_SS_VBSCuts*", "VBSWWH_OS_VBSCuts*", "VBSWZH_VBSCuts*", "VBSZZH_VBSCuts*"],
        "2016postVFP": ["VBSWWH_SS_VBSCuts*", "VBSWWH_OS_VBSCuts*", "VBSWZH_VBSCuts*", "VBSZZH_VBSCuts*"],
        "2017":        ["VBSWWH_SS_VBSCuts*", "VBSWWH_OS_VBSCuts*", "VBSWZH_VBSCuts*", "VBSZZH_VBSCuts*"],
        "2018":        ["VBSWWH_SS_VBSCuts*", "VBSWWH_OS_VBSCuts*", "VBSWZH_VBSCuts*", "VBSZZH_VBSCuts*"]
    },
}

if __name__ == "__main__":
    cli = argparse.ArgumentParser(description="Run merge results from /bin/run")
    cli.add_argument(
        "study", type=str,
        help="Name of the study to run"
    )
    cli.add_argument(
        "--tag", type=str, default="",
        help="Unique tag for output"
    )
    cli.add_argument(
        "--terminals", nargs="*",
        help="Names of terminal cuts in cutflow to write to CSV"
    )
    cli.add_argument(
        "--debug", action="store_true",
        help="Run in debug mode"
    )
    cli.add_argument(
        "--n_workers", type=int, default=8,
        help="Number of workers to run hadds"
    )
    cli.add_argument(
        "--basedir", type=str, default="studies",
        help="Base directory for output"
    )
    args = cli.parse_args()

    if args.tag:
        output_dir=f"{args.basedir}/{args.study}/output_{args.tag}"
    else:
        output_dir=f"{args.basedir}/{args.study}/output"

    os.makedirs(f"{output_dir}/Run2", exist_ok=True)

    # Get Cutflow objects for background samples
    bkg_cutflows = merge(output_dir, BKG_SAMPLE_MAP, n_hadders=args.n_workers)
    cutflows = bkg_cutflows
    cutflows["TotalBkg"] = bkg_cutflows.sum()
    # Get Cutflow objects for signal samples
    sig_cutflows = merge(output_dir, SIG_SAMPLE_MAP, n_hadders=args.n_workers)
    cutflows += sig_cutflows
    cutflows["VBSVVH"] = sig_cutflows.sum()
    cutflows.reorder(["QCD", "ttbar", "wjets", "zjets", "rare_EWK", "rare_top", "VV_VH", "TotalBkg", "SSVBSWWH", "OSVBSWWH", "VBSWZH", "VBSZZH", "VBSVVH"])

    # Write .cflow files
    for group_name, cutflow in cutflows.items():
        cutflow.write_cflow(f"{output_dir}/Run2/{group_name}_cutflow.cflow")
    # Write CSV
    for terminal_cut_name in args.terminals if args.terminals else cutflows.terminal_cut_names:
        cutflows.write_csv(f"{output_dir}/Run2/cutflow_{terminal_cut_name}.csv", terminal_cut_name)
        cutflows.write_txt(f"{output_dir}/Run2/cutflow_{terminal_cut_name}.txt", terminal_cut_name)

    # Merge data samples and DO NOT save Cutflow object
    merge(output_dir, OTHER_SAMPLE_MAP, n_hadders=args.n_workers)
